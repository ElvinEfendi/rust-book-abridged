"use strict";(self.webpackChunkrust_book_abridged=self.webpackChunkrust_book_abridged||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"The Rust Book (Abridged)","href":"/","docId":"ch00-intro"},{"type":"link","label":"1 - Getting Started","href":"/ch01-getting-started","docId":"ch01-getting-started"},{"type":"link","label":"2 - Programming a Guessing Game","href":"/ch02-guessing-game","docId":"ch02-guessing-game"},{"type":"link","label":"3 - Common Programming Concepts","href":"/ch03-common-programming-concepts","docId":"ch03-common-programming-concepts"},{"type":"link","label":"4 - Ownership, References, and Slices","href":"/ch04-ownership","docId":"ch04-ownership"},{"type":"link","label":"5 - Using Structs to Structure Related Data","href":"/ch05-structs","docId":"ch05-structs"},{"type":"link","label":"6 - Enums and Pattern Matching","href":"/ch06-enums-and-pattern-matching","docId":"ch06-enums-and-pattern-matching"},{"type":"link","label":"7 - Managing Growing Projects with Packages, Crates, and Modules","href":"/ch07-packages-crates-modules","docId":"ch07-packages-crates-modules"},{"type":"link","label":"8 - Common Collections","href":"/ch08-common-collections","docId":"ch08-common-collections"},{"type":"link","label":"9 - Error Handling","href":"/ch09-error-handling","docId":"ch09-error-handling"},{"type":"category","label":"10 - Generic Types, Traits, and Lifetimes","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"10.1 - Generic Data Types","href":"/ch10/ch10-01-generic-data-types","docId":"ch10/ch10-01-generic-data-types"},{"type":"link","label":"10.2 - Traits: Defining Shared Behavior","href":"/ch10/ch10-02-traits","docId":"ch10/ch10-02-traits"},{"type":"link","label":"10.3 - Validating References with Lifetimes","href":"/ch10/ch10-03-lifetimes","docId":"ch10/ch10-03-lifetimes"}],"href":"/category/10---generic-types-traits-and-lifetimes"},{"type":"link","label":"11 - Writing Automated Tests","href":"/ch11-automated-tests","docId":"ch11-automated-tests"},{"type":"link","label":"12 - An I/O Project: Building a Command Line Program","href":"/ch12-io-project-cli","docId":"ch12-io-project-cli"},{"type":"link","label":"13 - Functional Language Features: Iterators and Closures","href":"/ch13-functional-language-features","docId":"ch13-functional-language-features"},{"type":"link","label":"14 - More about Cargo and Crates","href":"/ch14-more-about-cargo","docId":"ch14-more-about-cargo"},{"type":"link","label":"15 - Smart Pointers","href":"/ch15-smart-pointers","docId":"ch15-smart-pointers"},{"type":"link","label":"16 - Fearless Concurrency","href":"/ch16-fearless-concurrency","docId":"ch16-fearless-concurrency"},{"type":"link","label":"17 - Object Oriented Features of Rust","href":"/ch17-object-oriented-features","docId":"ch17-object-oriented-features"},{"type":"link","label":"18 - Patterns and Matching","href":"/ch18-patterns-and-matching","docId":"ch18-patterns-and-matching"},{"type":"category","label":"19 - Advanced Features","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"19.1 - Unsafe Rust","href":"/ch19/ch19-01-unsafe","docId":"ch19/ch19-01-unsafe"},{"type":"link","label":"19.2 - Advanced Traits","href":"/ch19/ch19-02-advanced-traits","docId":"ch19/ch19-02-advanced-traits"},{"type":"link","label":"19.3 - Advanced Types","href":"/ch19/ch19-03-advanced-types","docId":"ch19/ch19-03-advanced-types"},{"type":"link","label":"19.4 - Advanced Functions and Closures","href":"/ch19/ch19-04-advanced-functions-and-closures","docId":"ch19/ch19-04-advanced-functions-and-closures"},{"type":"link","label":"19.5 - Macros","href":"/ch19/ch19-05-macros","docId":"ch19/ch19-05-macros"}],"href":"/category/19---advanced-features"},{"type":"category","label":"20 - Multithreaded Web Server","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"20.1 - Building a Single-Threaded Web Server","href":"/ch20/ch20-01-single-threaded-web-server","docId":"ch20/ch20-01-single-threaded-web-server"},{"type":"link","label":"20.2 - Turning Our Single-Threaded Server into a Multithreaded Server","href":"/ch20/ch20-02-multi-threaded-web-server","docId":"ch20/ch20-02-multi-threaded-web-server"},{"type":"link","label":"20.3 - Graceful Shutdown and Cleanup","href":"/ch20/ch20-03-graceful-shutdown","docId":"ch20/ch20-03-graceful-shutdown"}],"href":"/category/20---multithreaded-web-server"},{"type":"link","label":"21 - Async Programming","href":"/ch21-async","docId":"ch21-async"},{"type":"category","label":"Appendix","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Appendix A: Keywords","href":"/zz-appendix/appendix-01-keywords","docId":"zz-appendix/appendix-01-keywords"},{"type":"link","label":"Appendix B: Operators and Symbols","href":"/zz-appendix/appendix-02-operators","docId":"zz-appendix/appendix-02-operators"},{"type":"link","label":"Appendix C: Derivable Traits","href":"/zz-appendix/appendix-03-derivable-traits","docId":"zz-appendix/appendix-03-derivable-traits"},{"type":"link","label":"Appendix D - Useful Development Tools","href":"/zz-appendix/appendix-04-useful-development-tools","docId":"zz-appendix/appendix-04-useful-development-tools"},{"type":"link","label":"Appendix E - Editions","href":"/zz-appendix/appendix-05-editions","docId":"zz-appendix/appendix-05-editions"},{"type":"link","label":"Licenses","href":"/zz-appendix/appendix-06-licenses","docId":"zz-appendix/appendix-06-licenses"}],"href":"/category/appendix"}]},"docs":{"ch00-intro":{"id":"ch00-intro","title":"The Rust Book (Abridged)","description":"The Rust Book (Abridged)","sidebar":"tutorialSidebar"},"ch01-getting-started":{"id":"ch01-getting-started","title":"1 - Getting Started","description":"This chapter is going to get Rust installed, and explain how to use cargo to create and build a new project.","sidebar":"tutorialSidebar"},"ch02-guessing-game":{"id":"ch02-guessing-game","title":"2 - Programming a Guessing Game","description":"This chapter creates a little \\"guessing game\\" program. The program picks a random number, you try to guess the secret number, and the program will tell you if you\'re too high or too low. Hours of fun! We\'re going to introduce a bunch of concepts but not go into anything in too much detail in this chapter.","sidebar":"tutorialSidebar"},"ch03-common-programming-concepts":{"id":"ch03-common-programming-concepts","title":"3 - Common Programming Concepts","description":"In which we learn about variables, basic types, functions, comments, and control flow.","sidebar":"tutorialSidebar"},"ch04-ownership":{"id":"ch04-ownership","title":"4 - Ownership, References, and Slices","description":"4.1 - What is Ownership?","sidebar":"tutorialSidebar"},"ch05-structs":{"id":"ch05-structs","title":"5 - Using Structs to Structure Related Data","description":"5.1 - Defining and Instantiating Structs","sidebar":"tutorialSidebar"},"ch06-enums-and-pattern-matching":{"id":"ch06-enums-and-pattern-matching","title":"6 - Enums and Pattern Matching","description":"6.1 - Defining an Enum","sidebar":"tutorialSidebar"},"ch07-packages-crates-modules":{"id":"ch07-packages-crates-modules","title":"7 - Managing Growing Projects with Packages, Crates, and Modules","description":"So far all of our examples have lived in a single file, but almost any non-trivial program would be too large to fit in a single file. Rust provides a number of tools to help us organize a project:","sidebar":"tutorialSidebar"},"ch08-common-collections":{"id":"ch08-common-collections","title":"8 - Common Collections","description":"Rust\'s standard library includes a number of collections which store data on the heap:","sidebar":"tutorialSidebar"},"ch09-error-handling":{"id":"ch09-error-handling","title":"9 - Error Handling","description":"Rust has a tiered error-handling scheme:","sidebar":"tutorialSidebar"},"ch10/ch10-01-generic-data-types":{"id":"ch10/ch10-01-generic-data-types","title":"10.1 - Generic Data Types","description":"In Function Definitions","sidebar":"tutorialSidebar"},"ch10/ch10-02-traits":{"id":"ch10/ch10-02-traits","title":"10.2 - Traits: Defining Shared Behavior","description":"A trait in Rust is very similar to what most other languages call an interface. A trait defines some set of behavior, and every struct that implements the trait needs to implement that behavior.","sidebar":"tutorialSidebar"},"ch10/ch10-03-lifetimes":{"id":"ch10/ch10-03-lifetimes","title":"10.3 - Validating References with Lifetimes","description":"Every reference in Rust has a lifetime where the reference is valid. This has to do with ownership, so it\'s a feature that\'s somewhat unique to Rust.","sidebar":"tutorialSidebar"},"ch11-automated-tests":{"id":"ch11-automated-tests","title":"11 - Writing Automated Tests","description":"11.1 - How to Write Tests","sidebar":"tutorialSidebar"},"ch12-io-project-cli":{"id":"ch12-io-project-cli","title":"12 - An I/O Project: Building a Command Line Program","description":"We know enough Rust now that we can actually write a useful program. We\'re going to make a copy of the Linux grep command. If you\'re a Windows user, or you\'re not much of a command-line person, the grep command basically works like this:","sidebar":"tutorialSidebar"},"ch13-functional-language-features":{"id":"ch13-functional-language-features","title":"13 - Functional Language Features: Iterators and Closures","description":"In this chapter we will cover closures, which are a function-like construct you can store in a variable or pass as a parameter and iterators which are used for iterating over a collection of items.","sidebar":"tutorialSidebar"},"ch14-more-about-cargo":{"id":"ch14-more-about-cargo","title":"14 - More about Cargo and Crates","description":"14.1 - Customizing Builds with Release Profiles","sidebar":"tutorialSidebar"},"ch15-smart-pointers":{"id":"ch15-smart-pointers","title":"15 - Smart Pointers","description":"In C++, whenever we want to store an object on the heap, we new that object to allocate some memory. At some later point in time, we have to delete that memory. This is much like malloc and free in standard C.","sidebar":"tutorialSidebar"},"ch16-fearless-concurrency":{"id":"ch16-fearless-concurrency","title":"16 - Fearless Concurrency","description":"\\"Fearless concurrency\\" is the idea that Rust takes care of a lot of concurrency problems for you that are hard problems in other languages. Access to memory is handled through Rust\'s type system and ownership rules, and it turns out these rules can do an excellent job of catching many concurrency problems at compile time. These are the sorts of problems that in other languages wouldn\'t show up until runtime, and would show up as tricky to reproduce race conditions.","sidebar":"tutorialSidebar"},"ch17-object-oriented-features":{"id":"ch17-object-oriented-features","title":"17 - Object Oriented Features of Rust","description":"17.1 - Characteristics of Object Oriented Languages","sidebar":"tutorialSidebar"},"ch18-patterns-and-matching":{"id":"ch18-patterns-and-matching","title":"18 - Patterns and Matching","description":"18.1 - All the Places Patterns Can Be Used","sidebar":"tutorialSidebar"},"ch19/ch19-01-unsafe":{"id":"ch19/ch19-01-unsafe","title":"19.1 - Unsafe Rust","description":"Rust enforces all sort of safety features for us, preventing us from dereferencing null pointers, preventing us from creating potential data races. Sometimes, though, we know better than the compiler.","sidebar":"tutorialSidebar"},"ch19/ch19-02-advanced-traits":{"id":"ch19/ch19-02-advanced-traits","title":"19.2 - Advanced Traits","description":"For an introduction to traits, see chapter 10.","sidebar":"tutorialSidebar"},"ch19/ch19-03-advanced-types":{"id":"ch19/ch19-03-advanced-types","title":"19.3 - Advanced Types","description":"Using the Newtype Pattern for Type Safety and Abstraction","sidebar":"tutorialSidebar"},"ch19/ch19-04-advanced-functions-and-closures":{"id":"ch19/ch19-04-advanced-functions-and-closures","title":"19.4 - Advanced Functions and Closures","description":"Function Pointers","sidebar":"tutorialSidebar"},"ch19/ch19-05-macros":{"id":"ch19/ch19-05-macros","title":"19.5 - Macros","description":"If you\'re coming to Rust from C or C++, then you\'re no doubt already familiar with macros. We\'re going to give a quick introduction to macros here, but if you want to read more you should check out The Little Book of Rust Macros.","sidebar":"tutorialSidebar"},"ch20/ch20-01-single-threaded-web-server":{"id":"ch20/ch20-01-single-threaded-web-server","title":"20.1 - Building a Single-Threaded Web Server","description":"In this chapter we\'re going to build a simple HTTP server to put together a number of things we\'ve learned so far. As usual, the code for this project is available on the GitHub repo.","sidebar":"tutorialSidebar"},"ch20/ch20-02-multi-threaded-web-server":{"id":"ch20/ch20-02-multi-threaded-web-server","title":"20.2 - Turning Our Single-Threaded Server into a Multithreaded Server","description":"Simulating a Slow Request in the Current Server Implementation","sidebar":"tutorialSidebar"},"ch20/ch20-03-graceful-shutdown":{"id":"ch20/ch20-03-graceful-shutdown","title":"20.3 - Graceful Shutdown and Cleanup","description":"Right now when we hit CTRL-C to send an interrupt signal to our web server, it stops running, but it also stops any in-flight requests. Let\'s see if we can get our server to shut down gracefully.","sidebar":"tutorialSidebar"},"ch21-async":{"id":"ch21-async","title":"21 - Async Programming","description":"In this section we\'re going to re-implement our web server from chapter 20 using async functions. We\'re just going to give you enough here to get your feet wet. For further reading, check out Asynchronous Programming in Rust, and the Tokio Tutorial.","sidebar":"tutorialSidebar"},"zz-appendix/appendix-01-keywords":{"id":"zz-appendix/appendix-01-keywords","title":"Appendix A: Keywords","description":"This appendix was copied directly from \\"The Rust Programming Language\\".","sidebar":"tutorialSidebar"},"zz-appendix/appendix-02-operators":{"id":"zz-appendix/appendix-02-operators","title":"Appendix B: Operators and Symbols","description":"This appendix was copied directly from \\"The Rust Programming Language\\".","sidebar":"tutorialSidebar"},"zz-appendix/appendix-03-derivable-traits":{"id":"zz-appendix/appendix-03-derivable-traits","title":"Appendix C: Derivable Traits","description":"This appendix was copied directly from \\"The Rust Programming Language\\".","sidebar":"tutorialSidebar"},"zz-appendix/appendix-04-useful-development-tools":{"id":"zz-appendix/appendix-04-useful-development-tools","title":"Appendix D - Useful Development Tools","description":"This appendix was copied directly from \\"The Rust Programming Language\\".","sidebar":"tutorialSidebar"},"zz-appendix/appendix-05-editions":{"id":"zz-appendix/appendix-05-editions","title":"Appendix E - Editions","description":"This appendix was copied directly from \\"The Rust Programming Language\\".","sidebar":"tutorialSidebar"},"zz-appendix/appendix-06-licenses":{"id":"zz-appendix/appendix-06-licenses","title":"Licenses","description":"This book is an abridged edition of \\"The Rust Programming Language\\", by Steve Klabnik and Carol Nichols, with contributions from the Rust Community. The source for the original book can be found in https","sidebar":"tutorialSidebar"}}}')}}]);